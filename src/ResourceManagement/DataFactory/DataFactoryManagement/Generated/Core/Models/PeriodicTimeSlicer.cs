// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using Microsoft.Azure.Management.DataFactories.Core.Models;

namespace Microsoft.Azure.Management.DataFactories.Core.Models
{
    /// <summary>
    /// Periodic timer slicer.
    /// </summary>
    public partial class PeriodicTimeSlicer : Slicer
    {
        private System.DateTime? _anchorDateTime;
        
        /// <summary>
        /// Optional. The date used as a reference point for calculating slice
        /// start and end dates.
        /// </summary>
        public System.DateTime? AnchorDateTime
        {
            get { return this._anchorDateTime; }
            set { this._anchorDateTime = value; }
        }
        
        private string _frequency;
        
        /// <summary>
        /// Required. Frequency in terms of minute, hour, day, etc.
        /// </summary>
        public string Frequency
        {
            get { return this._frequency; }
            set { this._frequency = value; }
        }
        
        private uint _interval;
        
        /// <summary>
        /// Required. The interval multiplier of Frequency.
        /// </summary>
        public uint Interval
        {
            get { return this._interval; }
            set { this._interval = value; }
        }
        
        private System.TimeSpan? _offset;
        
        /// <summary>
        /// Optional. The offset relative to slice defined by Frequency
        /// multiplied by Interval.
        /// </summary>
        public System.TimeSpan? Offset
        {
            get { return this._offset; }
            set { this._offset = value; }
        }
        
        private string _style;
        
        /// <summary>
        /// Optional. The scheduler style.
        /// </summary>
        public string Style
        {
            get { return this._style; }
            set { this._style = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the PeriodicTimeSlicer class.
        /// </summary>
        public PeriodicTimeSlicer()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the PeriodicTimeSlicer class with
        /// required arguments.
        /// </summary>
        public PeriodicTimeSlicer(string frequency, uint interval, string name)
            : this()
        {
            if (frequency == null)
            {
                throw new ArgumentNullException("frequency");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            this.Frequency = frequency;
            this.Interval = interval;
            this.Name = name;
        }
    }
}
